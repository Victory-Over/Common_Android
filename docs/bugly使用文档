bugly使用
一、基本使用
1、在网站注册app 获取appId和appKey
2、在module gradle的dependencies中添加 compile 'com.tencent.bugly:crashreport:latest.release'
3、在Application中的onCreate下添加
        /**
         * @param appID 官网获得的appid
         * @param 第三个参数 true 调试模式 崩溃日志立即上传 logcat中打印自定义日志 输出bugly的日志
                    正式打包用false
         * */
        CrashReport.initCrashReport(getApplicationContext(), appID, true);

4、需要添加的权限
<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.READ_LOGS" />

5、混淆参数
-dontwarn com.tencent.bugly.**
-keep public class com.tencent.bugly.**{*;}




二、符号表自动上传配置
自动上传 只有在做混淆 且已经打包的情况下才上传
1、在工程的gradle  buildscript  dependencies中添加
classpath 'com.tencent.bugly:symtabfileuploader:latest.release'

2、在module的gradle中添加
apply plugin: 'bugly'
bugly {
    appId = 'appID' // 注册时分配的App ID
    appKey = 'appKey' // 注册时分配的App Key
}


基本功能配置完成 可以正常使用





三、更多设置
1、UserStrategy
UserStrategy类作为Bugly的初始化扩展，可以修改本次初始化Bugly数据的版本、渠道及部分初始化行为
可以自定义参数 随着崩溃日志输出

2、设置用户ID
CrashReport.setUserId("9527");  //精确定位到某个用户的异常

3、上报开发者Catch的异常
try {
} catch (Throwable thr) {
CrashReport.postCatchedException(thr); // bugly会将这个throwable上报
}

4、自定义日志功能
BuglyLog.v(tag, log)
BuglyLog.d(tag, log)
BuglyLog.i(tag, log)
BuglyLog.w(tag, log)
BuglyLog.e(tag, log)
在发生异常时才上报

